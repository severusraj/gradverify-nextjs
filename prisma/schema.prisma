generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  name               String
  password           String
  role               Role                @default(STUDENT)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  emailVerified      DateTime?
  lastResendAt       DateTime?
  resendCount        Int                 @default(0)
  lastLoginAt        DateTime?
  lastForgotPasswordAt DateTime?
  auditLogs          AuditLog[]
  awards             Award[]
  studentProfile     StudentProfile?
  verificationTokens VerificationToken[]
  invitations        Invitation[]        @relation("InvitationRecipients")
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String?
  expires   DateTime
  createdAt DateTime @default(now())
  email     String
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expires   DateTime
  createdAt DateTime @default(now())
}

model StudentProfile {
  id             String           @id @default(cuid())
  userId         String           @unique
  studentId      String
  program        String
  department     String
  dob            String
  pob            String
  psaS3Key       String
  gradPhotoS3Key String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  feedback       String?
  awardStatus    SubmissionStatus @default(NOT_SUBMITTED)
  overallStatus  SubmissionStatus @default(PENDING)
  psaStatus      SubmissionStatus @default(NOT_SUBMITTED)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  userId    String
  targetId  String?
  details   Json
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Award {
  id          String           @id @default(cuid())
  name        String
  description String
  category    String
  year        String
  studentId   String
  s3Key       String?
  status      SubmissionStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  student     User             @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Invitation {
  id            String           @id @default(cuid())
  template      String
  subject       String
  eventDate     String
  eventLocation String
  status        InvitationStatus @default(PENDING)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  recipients    User[]           @relation("InvitationRecipients")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  STUDENT
  FACULTY
}

enum SubmissionType {
  PSA
  GRADUATION_PHOTO
  AWARD
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
  NOT_SUBMITTED
}

enum InvitationStatus {
  PENDING
  SENT
  FAILED
}
